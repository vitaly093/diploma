---
#- name: "Upgrade the OS"
#  become: true
#  ansible.builtin.apt:
#    upgrade: full
#    force_apt_get: yes
#  tags: [temp]

- name: "Upgrade the OS"
  become: true
  ansible.builtin.shell: "sudo apt-get update"
  args:
    executable: /bin/bash
  tags: [temp]

- name: "temp NGINX"
  become: true
  ansible.builtin.apt:
    name: nginx
    update_cache: yes
  tags: [temp]

- name: Enable ip_forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes
  tags: [temp]

- name: Enable masquerade NAT
  iptables:
    table: nat
    chain: POSTROUTING
    out_interface: eth0
    jump: MASQUERADE
  tags: [temp]

- name: "Create required directories in /etc/letsencrypt"
  ansible.builtin.file:
    path: "/etc/letsencrypt/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=x,o=x
  with_items:
    - account
    - certs
    - csrs
    - keys
  tags: [temp]

- name: "Generate a Let's Encrypt account key"
  ansible.builtin.shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 4096 | sudo tee {{ letsencrypt_account_key }}; fi"
  tags: [temp]

- name: "Generate Let's Encrypt private key"
  ansible.builtin.shell: "openssl genrsa 4096 | sudo tee /etc/letsencrypt/keys/{{ item }}.key"
  with_items:
    - "{{ domain_name }}"
  tags: [temp]

- name: "Generate Let's Encrypt CSR"
  ansible.builtin.shell: "openssl req -new -sha256 -key /etc/letsencrypt/keys/{{ item }}.key -subj \"/CN={{ item }}\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"\n[SAN]\nsubjectAltName=DNS:{{ item }},DNS:www.{{ item }}\")) | sudo tee /etc/letsencrypt/csrs/{{ item }}.csr"
  args:
    executable: /bin/bash
  with_items:
    - "{{ domain_name }}"
  tags: [temp]

- name: "Begin Let's Encrypt challenges"
  community.crypto.acme_certificate:
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    terms_agreed: 1
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ item }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ item }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ item }}.crt"
    remaining_days: 30
  register: acme_challenge
  with_items:
    - "{{ domain_name }}"
  tags: [temp]

#- name: Debug registered var
#  debug: var=acme_challenge
#  tags: [obtain_cert]

- name: "Create .well-known/acme-challenge directory"
  ansible.builtin.file:
    path: /var/www/html/.well-known/acme-challenge
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  tags: [temp]

- name: "Implement http-01 challenge files"
  ansible.builtin.copy:
    content: "{{ acme_challenge['results'][item.num]['challenge_data'][item.domain]['http-01']['resource_value'] }}"
    dest: "/var/www/html/{{ acme_challenge['results'][item.num]['challenge_data'][item.domain]['http-01']['resource'] }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  with_items:
    - "{{ challenge }}"
    - "{{ challenge_www }}"
  tags: [temp]

- name: "Complete Let's Encrypt challenges"
  community.crypto.acme_certificate:
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ item.domain }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ item.domain }}.crt"
    chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ item.domain }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ item.domain }}"
    data: "{{ acme_challenge['results'][item.num] }}"
  with_items:
    - "{{ challenge }}"
  tags: [temp]

- name: "Disable default NGINX conf file"
  ansible.builtin.shell: "mv /etc/nginx/sites-enabled/default /backup"
  args:
    executable: /bin/bash
  tags: [temp]

- name: "Configure NGINX"
  ansible.builtin.template:
    src: nginx_conf.j2
    dest: /etc/nginx/conf.d/{{ item.key }}.conf
  with_dict: "{{ nginx['my_domains'] }}"
  notify:
    - restart nginx
  tags: [install]